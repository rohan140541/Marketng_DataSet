# -*- coding: utf-8 -*-
"""Marketing Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1orDs4WM0yCoLZYUFQ92NLLVe4hFWtb6s
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# **`Importing Data`**"""

data = pd.read_csv('/content/drive/MyDrive/dataset/marketing_data.csv')
pd.set_option('display.max_columns',30)

data

data.info()

data.describe()

data.columns

"""## `Rename The Columns`"""

data.rename(columns = {' Income ' : 'Income'}, inplace = True)

data.columns

# Check The Rename
data.info()

"""# **Change The Data Type Object To datatime**"""

data['Dt_Customer'] = pd.to_datetime(data['Dt_Customer'])

data.info()

"""#**No Duplicate Value**"""

data.duplicated().sum()

"""# **Checking For Outlier**"""

data.describe()

"""#**Outlier = `Year_birth`**

## Assumptions
#### 1. Nobody can live longer than 100 years hence considering the data point with the birth year 1893, 1899, 1900 is an potential outliers.
#### 2. Second highest income is around 160k hence considering the value 666666 is an outliers also considering minimum income data points as an outliers.
"""

a = ['Year_Birth', 'Income']

for i in a:
    figure = plt.figure(figsize = (10,3))
    sns.boxplot(data[i], orient = 'h')
    plt.title(i)
    plt.show()

q1 = data['Year_Birth'].quantile(0.25)
q3 = data['Year_Birth'].quantile(0.75)
iqr = q3 - q1

_min = q1-1.5*iqr
_max = q3+1.5*iqr

print('q1 = ',q1,'\n'
      'q3 = ',q3,'\n'
      'iqr = ',iqr,'\n'
      '_min = ',_min,'\n'
      '_max = ',_max)

"""**Handle Outlier Of `Year_Birth`**"""

# fetching the indexes of outlying rows.
data[data['Year_Birth'] < 1940]

# Index OF Outlier
out_index = data[data['Year_Birth'] < 1940].index
out_index

# Replacing The Minimum Value i.e 1932
data.loc[out_index , ['Year_Birth']] = _min

# Check The Changes
data.iloc[out_index]

"""**Check The Second Outlier `Income`**"""

# fetching the indexes of outlying rows.
data[data['Income'] > 165000]

out_index = data[data['Income'] > 162000].index
out_index

#  replacing the values with second maximum value i.e 162000 (Performing Capping)
data.loc[out_index ,'Income'] = 16200

# Check The Changes
data.iloc[out_index]

a = ['Year_Birth', 'Income']

for i in a:
    figure = plt.figure(figsize = (10,3))
    sns.boxplot(data[i], orient = 'h')
    plt.title(i)
    plt.show()

data.isnull().sum()

data.describe()

sns.histplot(data['Income'] , kde = True);

data['Income'].mean()

data['Income'].median()

data['Income'].fillna(data['Income'].mean(),inplace = True)

data.isnull().sum()

"""# **feature Engineearing**"""

data['Childhome'] = data['Kidhome'] + data['Teenhome']

data.drop(columns = ['Kidhome', 'Teenhome'] , inplace = True)

data['Age'] = data['Dt_Customer'].apply(lambda x : int(x.strftime('%Y'))) - data['Year_Birth']



"""# **2.What factors are significantly related to the number of web purchases?**"""

data.head()

web = data[data['NumWebPurchases'] != 0]
web.head()

data[data['NumWebPurchases'] == 0].head()

a = web['Year_Birth'].value_counts().reset_index().head(10)
a

ax = sns.barplot(data = a , x = 'Year_Birth' , y = 'count')
ax.bar_label(ax.containers[0]);

web['Age'] = web['Dt_Customer'].apply(lambda x : int(x.strftime ('%Y')))-web['Year_Birth']

web.head()

ax = sns.histplot(web['Age'] , bins= 5)
ax.bar_label(ax.containers[0]);

"""## **Educated Person highly Web Purchase Using**"""

web

web['Education'].value_counts().reset_index()

ax = sns.histplot(web['Education'] , bins = 5)
ax.bar_label(ax.containers[0]);

color = ['orange' , 'purple', 'red']

web['Education'].value_counts().plot(kind = 'pie', autopct='%1.0f%%', colors=color)

"""20,000 To 80,000 Range Of Salary Person Highly Web Perchase"""

sns.heatmap(web[['Income', 'Childhome', 'Recency','NumWebPurchases','Age']].corr()[['Income', 'Childhome', 'Recency','NumWebPurchases','Age']],annot = True)

sns.barplot(data = web, x = 'Marital_Status', y = 'NumWebPurchases')

sns.histplot(web['Income'], bins = 8)

"""Marital_Status

Married Person Highly Web Purchase
"""

ax = sns.histplot(web['Marital_Status'])
ax.bar_label(ax.containers[0]);

cat = []
for i in data.columns:
  if data[i].dtype == 'object' or data[i].nunique() <= 15 :
    cat.append(i)

ax = web['Childhome'].value_counts().plot(kind = 'barh')
ax.bar_label(ax.containers[0]);

"""### Inference:
1. People with age between `30 - 40` are highly active for Website purchase.
2. Educated people are most likely to use web purchasing services.
3. People with salaries between `25k` and `80k` are higly active on web purchases.
4. Customer having 1 child at home are likely to visit the website for the purchase.

# **3. Which marketing campaign was the most successful?**
"""

camp = data[[ 'AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5','Response']]
camp.head()

dic = {}
dic['Campigian'] = [ i for i in camp.columns]
dic['Total_customer'] = [ camp[i].sum() for i in camp.columns]
dic

camp_result = pd.DataFrame(dic)
camp_result

figure = plt.figure(figsize = (10,5))
ax = sns.barplot(data = camp_result , x = 'Campigian' , y = 'Total_customer')
ax.bar_label(ax.containers[0]);
plt.xticks(rotation = 45);

"""# **4. What does the average customer look like?**"""

data.head()

data.describe(include = 'all')

# Education , Marital_Status , Income , Recency , age , childhome

print(f"Average Customer Educated Is : {data['Education'].mode()[0]}")
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------------------')
print(f"Average Customer Is : {data['Marital_Status'].mode()[0]}")
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------------------')
print(f"Average Customer Income Is Betwen :{data['Income'].quantile(0.45)} and {data['Income'].quantile(0.55)}")
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------------------')
print(f"Average Customer's Age Is : {data['Age'].quantile(0.45)} and {data['Age'].quantile(0.55)}")
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------------------')
print(f"Average Customer Recencyc is {round(data['Recency'].mean(),0)}")
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------------------')
print(f"Average Customer Has {data['Childhome'].mode()[0]} Child At Their Home")

"""# **5. Which products are performing best?**"""

product = data[['MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds']]
product.head()

product_dic = {}
product_dic['Product'] = [ i for i in product.columns]
product_dic['Total_customer'] = [ product[i].sum() for i in product.columns]
product_dic

pd.DataFrame(product_dic)

figure = plt.figure(figsize = (10,5))
ax = sns.barplot(data = product_dic , x = 'Product' , y = 'Total_customer')
ax.bar_label(ax.containers[0]);
plt.xticks(rotation = 45);

"""# Inference -
1. `Wines` are performing exceptionaaly well as it generates revenue of around `6.8 Lakhs`, which is followed by `Meat Products` generating revenue of `3.7 Lakhs`.

# **6. Which channels are underperforming?**
"""

data.head()

channel = data[['NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth']]
channel

channel_dic = {}
channel_dic['Channels'] = [ i[3:] for i in channel.columns]
channel_dic['Total_Earning'] = [channel[i].sum() for i in channel.columns]

channel_df = pd.DataFrame(channel_dic)
channel_df.set_index(['Channels'],inplace = True)
channel_df

plt.figure(figsize = (8,5))
ax = sns.barplot(data = channel_df , x = 'Channels' , y = 'Total_Earning')
ax.bar_label(ax.containers[0]);

"""**7. Which Coutry Is Maximum Purchses**"""

data.columns

cou = data.groupby(by = 'Country')[['NumDealsPurchases','NumWebPurchases','NumCatalogPurchases','NumStorePurchases']].sum().sort_values(by = 'NumDealsPurchases')
cou

plt.figure(figsize = (8,5))
ax = sns.barplot(data = channel_df , x = 'Channels' , y = 'Total_Earning')
ax.bar_label(ax.containers[0]);

pur = data[['NumDealsPurchases','NumWebPurchases','NumCatalogPurchases','NumStorePurchases']]
pur

plot= 0
for i in pur:
 ax=sns.countplot(data = i)
 ax.bar_label(ax.containers[0])
 plt.xticks(rotation = 45);
 print(i)

pur_dic = {}
pur_dic['Product'] = [ i for i in product.columns]
pur_dic['Total_customer'] = [ product[i].sum() for i in product.columns]
pur_dic

